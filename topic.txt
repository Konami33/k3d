Context:
    1. context Package: The context package provides a way to propagate deadlines, cancelation signals, and other request-scoped values across API boundaries and between goroutines. It is commonly used to manage the lifetime of operations and handle timeouts, cancelations, and deadlines gracefully.
        a. Deadline: A deadline is a point in time until which an operation should complete. If the operation exceeds the deadline, it can be canceled.
        b. Cancelation Signal: A cancelation signal indicates that the operation should be canceled. It allows propagating the cancelation signal through the context tree to notify all relevant operations to terminate.

    2. context.Background(): This function returns a non-nil, empty Context object. It's typically used as the parent context for all other contexts within an application. The background context is a special context that serves as the root of the context tree. It is never canceled, has no values associated with it, and is mainly used as a starting point for creating other contexts.
FromEnv Function: 
    FromEnv is a function provided by the dockerClient package. It is used to create a new Docker client by initializing it with options obtained from environment variables. When called, it configures the client to use default settings based on environment variables such as DOCKER_HOST, DOCKER_TLS_VERIFY, and DOCKER_CERT_PATH.
    FromEnv reads the Docker environment variables and sets up the Docker client accordingly.
    It automatically configures the client to communicate with the Docker Engine running on the local machine or a remote machine, depending on the environment variables.
Why tmpfs are Needed: 
    Mounting /run and /var/run as tmpfs can be beneficial for containerized applications that rely on runtime data or need to write temporary files. Using tmpfs for these directories can improve performance and reduce wear on disk storage, especially in environments where container disk storage is limited or where disk I/O performance is critical. Additionally, tmpfs mounts are automatically cleaned up when the container exits, helping to keep the filesystem clean.

Regular expression and regex object:
    
    A regular expression (regex) is a sequence of characters that forms a search pattern, used mainly for pattern matching within strings. It's a powerful tool for string manipulation and searching, allowing you to specify complex patterns of text to be found or replaced in strings. (Go to reg expression cheat sheet for more clarification)

    Here's a breakdown of the components of a regex pattern:

    1. Literals: Characters that match themselves. For example, the letter "a" in a regex pattern will match the letter "a" in a string.
    2. Metacharacters: Characters with special meanings in regex. For example, the dot . matches any single character, and the asterisk * matches zero or more occurrences of the preceding character.
    3. Character Classes: Sets of characters enclosed in square brackets []. For example, [aeiou] matches any vowel.
    4. Quantifiers: Indicate the number of occurrences of the preceding character or group. For example, * matches zero or more occurrences, + matches one or more occurrences, and ? matches zero or one occurrence.
    5. Anchors: Specify positions in the string. For example, ^ matches the start of the string, and $ matches the end of the string.
    6. Grouping: Parentheses () are used to group parts of the pattern together. This allows applying quantifiers to multiple characters.

    A Regexp object, often referred to as a regex object, is a data structure provided by programming languages and libraries that represents a compiled regex pattern. It allows you to apply the pattern to strings for various operations like matching, searching, replacing, and splitting.